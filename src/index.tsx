/* import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import axios from "axios";
import { configureStore, combineReducers, Dispatch } from "@reduxjs/toolkit";

// Types
type PostType = {
    body: string;
    id: string;
    title: string;
    userId: string;
};

type PayloadType = {
    title: string;
    body?: string;
};

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>("posts");
    },
    updatePostTitle(postId: string, post: PayloadType) {
        return instance.put<PostType>(`posts/${postId}`, post);
    },
};

// Reducer
const initState = [] as PostType[];

type InitStateType = typeof initState;

const postsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case "POSTS/GET-POSTS":
            return action.posts;

        case "POSTS/UPDATE-POST-TITLE":
            return state.map((p) => {
                if (p.id === action.post.id) {
                    return { ...p, title: action.post.title };
                } else {
                    return p;
                }
            });

        default:
            return state;
    }
};

const getPostsAC = (posts: PostType[]) => ({ type: "POSTS/GET-POSTS", posts }) as const;
const updatePostTitleAC = (post: PostType) => ({ type: "POSTS/UPDATE-POST-TITLE", post }) as const;
type ActionsType = ReturnType<typeof getPostsAC> | ReturnType<typeof updatePostTitleAC>;

const getPostsTC = (): AppThunk => (dispatch) => {
    postsAPI.getPosts().then((res) => {
        dispatch(getPostsAC(res.data));
    });
};

const updatePostTC =
    (postId: string): AppThunk =>
        (dispatch, getState: any) => {
            try {

                const currentPost = getState().posts.find((p: PostType) => p.id === postId);

                if (currentPost) {
                    const payload = { title: "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. Backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π title" };
                    postsAPI.updatePostTitle(postId, payload).then((res) => {
                        dispatch(updatePostTitleAC(res.data));

                    });
                }
            } catch (e) {
                alert("–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –Ω–µ —É–¥–∞–ª–æ—Å—å üò¢");
            }
        };

// Store
const rootReducer = combineReducers({
    posts: postsReducer,
});

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// App
const App = () => {
    const dispatch = useAppDispatch();
    const posts = useAppSelector((state) => state.posts);

    useEffect(() => {
        dispatch(getPostsTC());
    }, []);

    const updatePostHandler = (postId: string) => {
        dispatch(updatePostTC(postId));
    };

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {posts.map((p) => {
                return (
                    <div key={p.id}>
                        <b>title</b>: {p.title}
                        <button onClick={() => updatePostHandler(p.id)}>–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç</button>
                    </div>
                );
            })}
        </>
    );
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
    <Provider store={store}>
        <App />
    </Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å –ø–æ—Å—Ç –∏ –≤—ã —É–≤–∏–¥–∏—Ç–µ alert —Å –æ—à–∏–±–∫–æ–π.
// Debugger / network / console.log –≤–∞–º –≤ –ø–æ–º–æ—â—å
// –ù–∞–π–¥–∏—Ç–µ –æ—à–∏–±–∫—É –∏ –≤—Å—Ç–∞–≤—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const payload = {...currentPost, tile: '–õ–µ—Ç–∏–º üöÄ'} */




/* 
import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import axios from "axios";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// Types
type CommentType = {
    postId: string;
    id: string;
    name: string;
    email: string;
    body: string;
};

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });

const commentsAPI = {
    getComments() {
        return instance.get<CommentType[]>("comments");
    },
    createComment() {
        const payload = {
            body: "–≠—Ç–æ –ø—Ä–æ—Å—Ç–æ –∑–∞–≥–ª—É—à–∫–∞. Backend —Å–∞–º —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏ –≤–µ—Ä–Ω–µ—Ç –µ–≥–æ –≤–∞–º",
        };
        return instance.post("comments", payload);
    },
};

// Reducer
const initState = [] as CommentType[];

type InitStateType = typeof initState;

const commentsReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case "COMMENTS/GET-COMMENTS":
            return action.comments;
        case "COMMENTS/CREATE-COMMENT":
            return [action.comment, ...state];
        default:
            return state;
    }
};

const getCommentsAC = (comments: CommentType[]) =>
    ({ type: "COMMENTS/GET-COMMENTS", comments }) as const;
const createCommentAC = (comment: CommentType) =>
    ({ type: "COMMENTS/CREATE-COMMENT", comment }) as const;

type ActionsType = ReturnType<typeof getCommentsAC> | ReturnType<typeof createCommentAC>;

const getCommentsTC = (): AppThunk => (dispatch) => {
    commentsAPI.getComments().then((res) => {
        dispatch(getCommentsAC(res.data));
    });
};

const addCommentTC = (): AppThunk => (dispatch) => {
    commentsAPI.createComment().then((res) => {
        dispatch(createCommentAC(res.data));
    });
};

// Store
const rootReducer = combineReducers({
    comments: commentsReducer,
});

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// App
const App = () => {
    const dispatch = useAppDispatch();
    const comments = useAppSelector((state) => state.comments);

    useEffect(() => {
        dispatch(getCommentsTC());
    }, []);

    const addCommentHandler = () => {
        // alert("–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–∏—Ç—å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å. –ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ üöÄ");
        dispatch(addCommentTC())
    };

    return (
        <>
            <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
            <button style={{ marginBottom: "10px" }} onClick={addCommentHandler}>
                –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
            </button>
            {comments.map((p) => {
                return (
                    <div key={p.id}>
                        <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b>: {p.body}
                    </div>
                );
            })}
        </>
    );
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
    <Provider store={store}>
        <App />
    </Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–ª–∂–µ–Ω –¥–æ–±–∞–≤–∏—Ç—å—Å—è,
// –Ω–æ –ø–æ—è–≤–ª—è–µ—Ç—Å—è alert.
// –í–º–µ—Å—Ç–æ alerta –Ω–∞–ø–∏—à–∏—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–æ–±–∞–≤–ª—è–ª—Å—è.
// –ü—Ä–∞–≤–∏–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: return instance.get<CommentType[]>('comments?_limit=10') */


/* 
import axios from "axios";
import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import { configureStore, combineReducers, AnyAction } from "@reduxjs/toolkit";

// Types
type CommentType = {
    postId: string;
    id: string;
    name: string;
    email: string;
    body: string;
};

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });

const commentsAPI = {
    getComments() {
        return instance.get<CommentType[]>("comments");
    },
};

// Reducer
const initState = [] as CommentType[];

type InitStateType = typeof initState;

const commentsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case "COMMENTS/GET-COMMENTS":
            return action.comments;
        default:
            return state;
    }
};

const getCommentsAC = (comments: CommentType[]) =>
    ({ type: "COMMENTS/GET-COMMENTS", comments }) as const;
type ActionsType = ReturnType<typeof getCommentsAC>;

const getCommentsTC = (): ThunkAction<void, RootState, unknown, ActionsType> => (dispatch) => {
    commentsAPI.getComments().then((res) => {
        dispatch(getCommentsAC(res.data));
    });
};

// Store
const rootReducer = combineReducers({
    comments: commentsReducer,
});

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// App
export const App = () => {
    const comments = useAppSelector((state) => state.comments);
    const dispatch = useAppDispatch();

    useEffect(() => {
        dispatch(getCommentsTC());
    }, []);

    return (
        <>
            <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
            {comments.map((c) => {
                return (
                    <div key={c.id}>
                        <b>Comment</b>: {c.body}{" "}
                    </div>
                );
            })}
        </>
    );
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
    <Provider store={store}>
        <App />
    </Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkAction<any, any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å thunk creator?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone void */




/* import axios from "axios";
import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import { ThunkDispatch } from "redux-thunk";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// Types
type CommentType = {
    postId: string;
    id: string;
    name: string;
    email: string;
    body: string;
};

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });

const commentsAPI = {
    getComments() {
        return instance.get<CommentType[]>("comments");
    },
};

// Reducer
const initState = [] as CommentType[];

type InitStateType = typeof initState;

const commentsReducer = (state: InitStateType = initState, action: ActionsType): InitStateType => {
    switch (action.type) {
        case "COMMENTS/GET-COMMENTS":
            return action.comments;
        default:
            return state;
    }
};

const getCommentsAC = (comments: CommentType[]) =>
    ({ type: "COMMENTS/GET-COMMENTS", comments }) as const;
type ActionsType = ReturnType<typeof getCommentsAC>;

const getCommentsTC = () => (dispatch: DispatchType) => {
    commentsAPI.getComments().then((res) => {
        dispatch(getCommentsAC(res.data));
    });
};

// Store
const rootReducer = combineReducers({
    comments: commentsReducer,
});

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof rootReducer>;
type DispatchType = ThunkDispatch<RootState, unknown, ActionsType>;
const useAppDispatch = () => useDispatch<DispatchType>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// App
export const App = () => {
    const comments = useAppSelector((state) => state.comments);
    const dispatch = useAppDispatch();

    useEffect(() => {
        dispatch(getCommentsTC());
    }, []);

    return (
        <>
            <h1>üìù –°–ø–∏—Å–æ–∫ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h1>
            {comments.map((c) => {
                return (
                    <div key={c.id}>
                        <b>Comment</b>: {c.body}{" "}
                    </div>
                );
            })}
        </>
    );
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
    <Provider store={store}>
        <App />
    </Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ —Å—Ç–æ–∏—Ç –≤ —Ç–æ–º —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω—É–∂–Ω—ã–µ —Ç–∏–ø—ã –≤ –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤—ã–π —Ç–∏–ø ThunkDispatch<any, any, any>.
// –ß—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ any, any, any —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞—Ç—å dispatch ?
// –û—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: unknown status isDone */



/* 
import { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import axios from "axios";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// Types
type TodoType = {
    id: string;
    title: string;
    order: number;
    createdAt: string;
    updatedAt: string;
    completed: boolean;
};

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });

const todosAPI = {
    getTodos() {
        return instance.get<TodoType[]>("todos");
    },
    changeTodoStatus(id: string, completed: boolean) {
        return instance.put(`todos/${id}`, { completed });
    },
};

// Reducer
const initState = [] as TodoType[];

type InitStateType = typeof initState;

const todosReducer = (state: InitStateType = initState, action: ActionsType) => {
    switch (action.type) {
        case "TODOS/GET-TODOS":
            return action.todos;

        case "TODOS/CHANGE-TODO-STATUS":
            return state.map((t) => {
                if (t.id === action.todo.id) {
                    return { ...t, completed: action.todo.completed };
                } else {
                    return t;
                }
            });

        default:
            return state;
    }
};

const getTodosAC = (todos: TodoType[]) => ({ type: "TODOS/GET-TODOS", todos }) as const;
const changeTodoStatusAC = (todo: TodoType) =>
    ({ type: "TODOS/CHANGE-TODO-STATUS", todo }) as const;
type ActionsType = ReturnType<typeof getTodosAC> | ReturnType<typeof changeTodoStatusAC>;

// Thunk
const getTodosTC = (): AppThunk => (dispatch) => {
    todosAPI.getTodos().then((res) => {
        dispatch(getTodosAC(res.data));
    });
};

const changeTodoStatusTC =
    (id: string, completed: boolean): AppThunk =>
        (dispatch) => {
            todosAPI.changeTodoStatus(id, completed).then((res) => {
                dispatch(changeTodoStatusAC(res.data));
            });
        };

// Store
const rootReducer = combineReducers({
    todos: todosReducer,
});

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, ActionsType>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// App
const App = () => {
    const dispatch = useAppDispatch();
    const todos = useAppSelector((state) => state.todos);

    useEffect(() => {
        dispatch(getTodosTC());
    }, []);

    const changeStatusHandler = (id: string, completed: boolean) => {
        dispatch(changeTodoStatusTC(id, completed));
    };

    return (
        <>
            <h2>‚úÖ –°–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤</h2>
            {todos.length ? (
                todos.map((t) => {
                    return (
                        <div style={t.completed ? { color: "grey" } : {}} key={t.id}>
                            <input
                                type="checkbox"
                                checked={t.completed}
                                onChange={() => changeStatusHandler(t.id, !t.completed)}
                            />
                            <b>–û–ø–∏—Å–∞–Ω–∏–µ</b>: {t.title}
                        </div>
                    );
                })
            ) : (
                <h2>–¢—É–¥—É–ª–∏—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
            )}
        </>
    );
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
    <Provider store={store}>
        <App />
    </Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç—É–¥—É–ª–∏—Å—Ç–æ–≤,
// –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.
// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É.
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState */




/* 
import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { Provider, TypedUseSelectorHook, useDispatch, useSelector } from "react-redux";
import axios from "axios";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// Types
type PostType = {
    id: string;
    body: string;
    title: string;
    userId: string;
};

// Api
const instance = axios.create({ baseURL: "https://exams-frontend.kimitsu.it-incubator.ru/api/" });

const postsAPI = {
    getPosts() {
        return instance.get<PostType[]>("posts");
    },
};

// Reducer
const initState = [] as PostType[];

type InitStateType = typeof initState;

const postsReducer = (
    state: InitStateType = initState,
    action: GetPostsActionType,
): InitStateType => {
    switch (action.type) {
        case "POSTS/GET-POSTS":
            return action.posts;
    }
    return state;
};

const getPostsAC = (posts: PostType[]) => ({ type: "POSTS/GET-POSTS", posts }) as const;
type GetPostsActionType = ReturnType<typeof getPostsAC>;

const getPostsTC = (): AppThunk => (dispatch) => {
    postsAPI.getPosts().then((res) => {
        dispatch(getPostsAC(res.data));
    });
};

// Store
const rootReducer = combineReducers({
    posts: postsReducer,
});

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, GetPostsActionType>;
type AppThunk<ReturnType = void> = ThunkAction<ReturnType, RootState, unknown, GetPostsActionType>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

// App
const App = () => {
    const dispatch = useAppDispatch();
    const posts = useAppSelector((state) => state.posts);

    useEffect(() => {
        dispatch(getPostsTC());
    }, []);

    return (
        <>
            <h1>üìú –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤</h1>
            {posts.length ? (
                posts.map((p) => {
                    return (
                        <div key={p.id}>
                            <b>title</b>: {p.title}
                        </div>
                    );
                })
            ) : (
                <h2>–ü–æ—Å—Ç–æ–≤ –Ω–µ—Ç—É üò•</h2>
            )}
        </>
    );
};

const root = ReactDOM.createRoot(document.getElementById("root") as HTMLElement);
root.render(
    <Provider store={store}>
        <App />
    </Provider>,
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤—ã –¥–æ–ª–∂–Ω—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–æ–≤,
// –Ω–æ –∏–∑-–∑–∞ –Ω–µ–≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –±—ã–ª–∞ –¥–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞.

// –ù–∞–π–¥–∏—Ç–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫—É
// –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é —Å—Ç—Ä–æ–∫–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞.
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: type InitStateType = typeof initState

// P.S. –≠—Ç–∞ –æ—à–∏–±–∫–∞ –∏–∑ —Ä–µ–∞–ª—å–Ω–æ–π –∂–∏–∑–Ω–∏, —Å—Ç—É–¥–µ–Ω—Ç—ã —Ç–∞–∫ —á–∞—Å—Ç–æ –æ—à–∏–±–∞—é—Ç—Å—è –∏ –Ω–µ –º–æ–≥—É—Ç –ø–æ–Ω—è—Ç—å –≤ —á–µ–º –¥–µ–ª–æ. */



/* 

import React from 'react'
import ReactDOM from 'react-dom/client';


const thunkCreator = () => (dispatch: any, getState: any) => {
    // —Åode...
}


// App
const App = () => {
    return (
        <>
            <h1>–í —ç—Ç–æ–º –∑–∞–¥–∞–Ω–∏–∏ —Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ —ç–∫—Ä–∞–Ω –Ω–µ –Ω—É–∂–Ω–æ. –ù–∏—á–µ–≥–æ –Ω–µ –∏–∑–º–µ–Ω–∏—Ç—Å—è üòà</h1>
            <p>–ß–∏—Ç–∞–π—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –∑–∞–¥–∞–Ω–∏—é</p>
        </>
    )
}

const root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);
root.render(<App />)

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –í–º–µ—Å—Ç–æ XXX –∏ YYY —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Å–∞–Ω–∫—É.
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: useCallback state */





