/* import React, { ChangeEvent, useState } from "react";
import ReactDOM from "react-dom/client";
import { BrowserRouter, Route, Routes, useNavigate } from "react-router-dom";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import {
  Provider,
  TypedUseSelectorHook,
  useDispatch,
  useSelector,
} from "react-redux";
import axios from "axios";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// Types
type LoginFieldsType = {
  email: string;
  password: string;
};

// API
const instance = axios.create({
  baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/",
});

const api = {
  login(data: LoginFieldsType) {
    return instance.post("auth/login", data);
  },
};

// Reducer
const initState = { isAuth: false };
type InitStateType = typeof initState;

const appReducer = (
  state: InitStateType = initState,
  action: ActionsType
): InitStateType => {
  switch (action.type) {
    case "SET_AUTH":
      return { ...state, isAuth: action.isAuth };
    default:
      return state;
  }
};

// Store
const rootReducer = combineReducers({ app: appReducer });

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<
  ReturnType,
  RootState,
  unknown,
  ActionsType
>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

const setAuth = (isAuth: boolean) => ({ type: "SET_AUTH", isAuth } as const);
type ActionsType = ReturnType<typeof setAuth>;

// Thunk
const loginTC =
  (email: string, password: string): AppThunk =>
  async dispatch => {
    try {
      await api.login({ email, password });
      dispatch(setAuth(true));
    } catch (e: any) {
      alert(`‚ùå ${e.response.data.errors} ‚ùå`);
    }
  };

// Components
const Login = () => {
  const isAuth = useAppSelector(state => state.app.isAuth);

  const dispatch = useAppDispatch();

  const navigate = useNavigate();

  const [email, setEmail] = useState("darrell@gmail.com");
  const [password, setPassword] = useState("123");

  const changeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {
    setEmail(e.target.value);
  };

  const changePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {
    setPassword(e.target.value);
  };
  if (isAuth) {
    navigate("/profile");
  }

  return (
    <div>
      <input type={"text"} value={email} onChange={changeEmailHandler} />
      <input
        type={"password"}
        value={password}
        onChange={changePasswordHandler}
      />
      <button
        disabled={!email || !password}
        onClick={() => dispatch(loginTC(email, password))}
      >
        login
      </button>
    </div>
  );
};

export const App = () => {
  return (
    <Routes>
      <Route path={"/"} element={<Login />} />
      <Route path={"/profile"} element={<h2>üòé Profile</h2>} />
    </Routes>
  );
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <BrowserRouter>
    <Provider store={store}>
      <App />
    </Provider>
  </BrowserRouter>
); */

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// ‚ùó Email –∏ password –º–µ–Ω—è—Ç—å –Ω–µ –Ω–∞–¥–æ. –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –±—É–¥–µ—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å —É—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å.
// –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å –∫–æ–¥ —Ç–∞–∫, —á—Ç–æ–±—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ª–æ–≥–∏–Ω–∏—Ç—å—Å—è (–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–Ω—É—Ç—å—Å—è –Ω–∞ Profile)
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å, —á—Ç–æ–±—ã —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—É—é –∑–∞–¥–∞—á—É.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: navigate('/profile')

/* 
import React from "react";
import ReactDOM from "react-dom/client";

export const App = () => {
  return (
    <div>
      <h2>–î–ª—è —á–µ–≥–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ .gitignore ?</h2>
      <ul>
        <li>1 - –ß—Ç–æ–±—ã git —É–¥–∞–ª—è–ª –∏—Ö –∏—Å—Ç–æ—Ä–∏—é, —Ö—Ä–∞–Ω—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω—é—é –≤–µ—Ä—Å–∏—é</li>
        <li>
          2 - –ß—Ç–æ–±—ã git –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å —ç—Ç–∏–º–∏ —Ñ–∞–π–ª–∞–º —É–≤–µ–¥–æ–º–ª—è–ª –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏
        </li>
        <li>3 - –ß—Ç–æ–±—ã git –Ω–µ —Å–ª–µ–¥–∏–ª –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö</li>
        <li>
          4 - –§–∞–π–ª .gitignore –Ω–µ –Ω–µ—Å–µ—Ç –Ω–∏–∫–∞–∫–æ–π —Å–º—ã—Å–ª–æ–≤–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏, —Ç.–∫. –≤—Å–µ
          —Ñ–∞–π–ª—ã —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º—ã —Ä–∞–±–æ—Ç–∞–µ–º –¥–æ–ª–∂–Ω—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å—Å—è. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
          –Ω–∏–∫–∞–∫–∏–µ —Ñ–∞–π–ª—ã –≤ .gitignore –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ
        </li>
        <li>5 - –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞</li>
      </ul>
    </div>
  );
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(<App />);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –î–ª—è —á–µ–≥–æ –Ω–∞–¥–æ –¥–æ–±–∞–≤–ª—è—Ç—å —Ñ–∞–π–ª—ã –≤ .gitignore ?
// –ú–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞ (–æ—Ç–≤–µ—Ç –¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª).
// ‚ùó –û—Ç–≤–µ—Ç –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –≤–µ—Ä–Ω—ã–π, —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏.
// –ï—Å–ª–∏ —É–∫–∞–∑–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç (1),
// –∞ –Ω—É–∂–Ω–æ –±—ã–ª–æ —É–∫–∞–∑–∞—Ç—å –¥–≤–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞ (1 –∏ 2), —Ç–æ –æ—Ç–≤–µ—Ç –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –±—É–¥–µ—Ç –∑–∞—Å—á–∏—Ç–∞–Ω –∫–∞–∫ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: 1
 */

/* import ReactDOM from "react-dom/client";
import React, { useEffect, useState } from "react";

export const Mining = () => {
  const [btc, setBtc] = useState(0);

  useEffect(() => {
    setInterval(() => {
      // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
      setBtc(prevState => prevState + 1);
    }, 1000);
  }, []);

  return <h1>ü™ô BTC: {btc}</h1>;
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(<Mining />);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ–º–æ–≥–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–∞–º–∞–π–Ω–∏—Ç—å –±–∏—Ç–∫–æ–∏–Ω–æ–≤.
// –ß—Ç–æ-—Ç–æ –Ω–µ –º–∞–π–Ω—è—Ç—Å—è üò•.
// –ß—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–º–µ—Å—Ç–æ XXX —á—Ç–æ–±—ã –±–∏—Ç–∫–æ–∏–Ω—ã –º–∞–π–Ω–∏–ª–∏—Å—å (–∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –ø—Ä–∏–±–∞–≤–ª—è–ª—Å—è 1 –±–∏—Ç–∫–æ–∏–Ω) ?
// ‚ùó–í –∫–∞—á–µ—Å—Ç–≤–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ prevState

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: btc = 1000000
 */
/* 
import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import {
  Provider,
  TypedUseSelectorHook,
  useDispatch,
  useSelector,
} from "react-redux";
import {
  BrowserRouter,
  Navigate,
  Route,
  Routes,
  useNavigate,
} from "react-router-dom";
import axios from "axios";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// API
const instance = axios.create({
  baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/",
});

const api = {
  me() {
    return instance.get("auth/me?delay=3");
  },
};

// Reducer
const initState = {
  isInitialized: false,
  isLoading: false,
  isLoggedIn: false,
};
type InitStateType = typeof initState;

const appReducer = (
  state: InitStateType = initState,
  action: ActionsType
): InitStateType => {
  switch (action.type) {
    case "SET_IS_INITIALIZED":
      return { ...state, isInitialized: action.isInitialized };
    case "SET_LOADING":
      return { ...state, isLoading: action.isLoading };
    case "SET_IS_LOGGED_IN":
      return { ...state, isLoggedIn: action.isLoggedIn };
    default:
      return state;
  }
};

// Store
const rootReducer = combineReducers({ app: appReducer });

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<
  ReturnType,
  RootState,
  unknown,
  ActionsType
>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

const setIsInitialized = (isInitialized: boolean) =>
  ({ type: "SET_IS_INITIALIZED", isInitialized } as const);
const setLoading = (isLoading: boolean) =>
  ({ type: "SET_LOADING", isLoading } as const);
const setIsLoggedIn = (isLoggedIn: boolean) =>
  ({ type: "SET_IS_LOGGED_IN", isLoggedIn } as const);
type ActionsType =
  | ReturnType<typeof setLoading>
  | ReturnType<typeof setIsInitialized>
  | ReturnType<typeof setIsLoggedIn>;

// Thunk
const me = (): AppThunk => async dispatch => {
  dispatch(setLoading(true));
  api
    .me()
    .then(res => {
      dispatch(setIsLoggedIn(true));
    })
    .finally(() => {
      dispatch(setLoading(false));
      dispatch(setIsInitialized(true));
    });
};

// Components
const Loader = () => <h2>üîò –ö—Ä—É—Ç–∏–ª–∫–∞...</h2>;

const Login = () => {
  const isInitialized = useAppSelector(state => state.app.isInitialized);
  const isLoading = useAppSelector(state => state.app.isLoading);
  const isLoggedIn = useAppSelector(state => state.app.isLoggedIn);

  if (isLoggedIn) {
    return <Navigate to={"/"} />;
  }

  return <h2>üê£ Login</h2>;
};
const Profile = () => {
  const isInitialized = useAppSelector(state => state.app.isInitialized);
  const isLoading = useAppSelector(state => state.app.isLoading);
  const isLoggedIn = useAppSelector(state => state.app.isLoggedIn);

  if (!isLoggedIn) {
    return <Navigate to={"/login"} />;
  }

  return <h2>üòé Profile </h2>;
};

export const App = () => {
  const isInitialized = useAppSelector(state => state.app.isInitialized);
  const isLoading = useAppSelector(state => state.app.isLoading);
  const isLoggedIn = useAppSelector(state => state.app.isLoggedIn);

  const dispatch = useAppDispatch();

  useEffect(() => {
    dispatch(me());
    dispatch(setIsInitialized(true));
  }, []);

  return (
    <Routes>
      <Route path={"/"} element={<Profile />} />
      <Route path={"login"} element={<Login />} />
    </Routes>
  );
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <BrowserRouter>
    <Provider store={store}>
      <App />
    </Provider>
  </BrowserRouter>
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º—ã –≤–∏–¥–∏–º Login, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã Profile
// –ù–æ —ç—Ç–æ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ Login,
// –ø–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ,
// –∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å Loader

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Loader/>
 */
/* 
import React from "react";
import ReactDOM from "react-dom/client";

export const App = () => {
  return (
    <div>
      <h2>
        –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        login –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ–µ ?
      </h2>
    </div>
  );
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(<App />);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ß—Ç–æ –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –≤ –∫–æ–Ω—Å–æ–ª–∏, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≤–µ—Ç–∫—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º login –∏ –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –Ω–µ–µ ?
//‚ùó–û—Ç–≤–µ—Ç –Ω–∞–ø–∏—Å–∞—Ç—å –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–æ–π

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: git create login ---> git checkout -b login!!!!
 */
/* 
import ReactDOM from "react-dom/client";
import {
  BrowserRouter,
  Route,
  Routes,
  useNavigate,
  useParams,
} from "react-router-dom";
import React from "react";

type UserType = {
  id: number;
  name: string;
  avatar: string;
  age: number;
  address: string;
};

const users: UserType[] = [
  {
    id: 1,
    name: "my Name",
    age: 32,
    avatar: "‚Äî‡∏Ö/·ê†.Ã´ .·êü\\‡∏Ö‚Äî",
    address: "my Address",
  },
  {
    id: 2,
    name: "John",
    age: 22,
    avatar: ":)",
    address: "California",
  },
  {
    id: 3,
    name: "Mike",
    age: 18,
    avatar: "^._.^",
    address: "New York",
  },
  {
    id: 4,
    name: "Emma",
    age: 38,
    avatar: "/·ê†-Íûà-·êü\\",
    address: "Washington",
  },
];

const StartPage = () => {
  const navigate = useNavigate();
  const friends = users.filter(u => u.id !== 1);

  const mappedFriends = friends.map((f, i) => {
    const go = () => {
      navigate("/friend/" + f.id);
    };

    return (
      <div
        key={i}
        onClick={go}
        style={{ paddingLeft: 24, color: "blue", cursor: "pointer" }}
      >
        {f.name}, {f.age}
      </div>
    );
  });

  return (
    <div>
      <h2>üôÇ My profile</h2>
      <Profile userId={1} />
      <hr />
      <h2>üë™ Friends</h2>
      {mappedFriends}
    </div>
  );
};
const Profile: React.FC<{ userId?: number }> = ({ userId }) => {
  const { id } = useParams<{ id: string }>();
  const user = users.find(u => u.id === +(id || userId || 0));

  return (
    <div>
      <div>
        <b>avatar</b> {user?.avatar}
      </div>
      <div>
        <div>
          <b>name</b>: {user?.name}
        </div>
        <div>
          <b>age</b>: {user?.age}
        </div>
        <div>
          <b>address</b>: {user?.address}
        </div>
      </div>
    </div>
  );
};

export const Friends = () => {
  return (
    <Routes>
      <Route path={"/"} element={<StartPage />} />
      <Route path={"friend/:id"} element={<Profile />} />
      <Route path={"*"} element={<div>‚ùå404 Page Not Found‚ùå</div>} />
    </Routes>
  );
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <BrowserRouter>
    <Friends />
  </BrowserRouter>
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ —ç–∫—Ä–∞–Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è
// –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π.
// –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –≤–∏–¥–∏–º ‚ùå404 Page Not Found‚ùå
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥, —á—Ç–æ–±—ã –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
// –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –¥—Ä—É–≥–µ.
// –í –∫–∞—á–µ—Å—Ç–≤–µ –æ—Ç–≤–µ—Ç–∞ —É–∫–∞–∂–∏—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –∫–æ–¥–∞.
//
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Profile userId={4}/>
 */
/* 
import ReactDOM from "react-dom/client";
import React, { useEffect, useState } from "react";
import {
  BrowserRouter,
  Route,
  Routes,
  useNavigate,
  useParams,
} from "react-router-dom";

const newSum = 1000;

const Login = () => {
  const navigate = useNavigate();

  useEffect(() => {
    navigate(`/balance/${newSum}`);
  }, []);

  return <h1>Login</h1>;
};

const Balance = () => {
  const [balance, setBalance] = useState(500);

  const params = useParams();

  useEffect(() => {
    if (params.bonus) {
      // ‚ùó‚ùó‚ùó XXX ‚ùó‚ùó‚ùó
      setBalance(parseInt(params.bonus));
    }
  }, []);

  return <h1>üíµ balance: {balance}</h1>;
};

export const Bank = () => {
  return (
    <Routes>
      <Route path={"/"} element={<Login />} />
      <Route path={"/balance/:bonus"} element={<Balance />} />
    </Routes>
  );
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <BrowserRouter>
    <Bank />
  </BrowserRouter>
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–µ—Ä–µ–¥ –≤–∞–º–∏ –±–∞–ª–∞–Ω—Å —Ä–∞–≤–Ω—ã–π 500.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –≤–º–µ—Å—Ç–æ XXX –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥,
// –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –±–∞–ª–∞–Ω—Å —É–≤–µ–ª–∏—á–∏—Ç—Å—è –Ω–∞ —Å—É–º–º—É —É–∫–∞–∑–∞–Ω–Ω—É—é –≤ —Ä–æ—É—Ç–µ.

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: balance = newSum
 */
/* 
import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import {
  BrowserRouter,
  Route,
  Routes,
  useNavigate,
  useParams,
} from "react-router-dom";

const Login = () => {
  const navigate = useNavigate();

  useEffect(() => {
    navigate("/secret/JIUzI1NiIsInR5cCI6IkpXVCJ9");
  }, []);

  return <div>Login</div>;
};
const SecretToken = () => {
  const { token } = useParams(); // FIX

  return <h1>ü¶æ token: {token}</h1>;
};

export const App = () => {
  return (
    <Routes>
      <Route path={"/"} element={<Login />} />
      <Route path={"/secret/:token"} element={<SecretToken />} />
    </Routes>
  );
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <BrowserRouter>
    <App />
  </BrowserRouter>
);

// üìú–û–ø–∏—Å–∞–Ω–∏–µ:
// –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –Ω–∞ 17 —Å—Ç—Ä–æ–∫–µ —Ç–∞–∫, —á—Ç–æ–±—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –æ—Ç–æ–±—Ä–∞–∑–∏–ª—Å—è —Ç–æ–∫–µ–Ω.

//‚ùó–û—Ç–≤–µ—Ç –º–æ–∂–Ω–æ —É–∫–∞–∑—ã–≤–∞—Ç—å —Å —Ç–∏–ø–∏–∑–∞—Ü–∏–µ–π –∏ –±–µ–∑. –£—á—Ç–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤
// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: const token = '123'
 */

//-------------4--------------------------------------------------------------------------------------------------------------------------
import React, { useEffect } from "react";
import ReactDOM from "react-dom/client";
import { ThunkAction, ThunkDispatch } from "redux-thunk";
import {
  Provider,
  TypedUseSelectorHook,
  useDispatch,
  useSelector,
} from "react-redux";
import {
  BrowserRouter,
  Navigate,
  Route,
  Routes,
  useNavigate,
} from "react-router-dom";
import axios from "axios";
import { configureStore, combineReducers } from "@reduxjs/toolkit";

// API
const instance = axios.create({
  baseURL: "https://exams-frontend.kimitsu.it-incubator.io/api/",
});

const api = {
  me() {
    return instance.get("auth/me?delay=3");
  },
};

// Reducer
const initState = {
  isInitialized: false,
  isLoading: false,
  isLoggedIn: false,
};
type InitStateType = typeof initState;

const appReducer = (
  state: InitStateType = initState,
  action: ActionsType
): InitStateType => {
  switch (action.type) {
    case "SET_IS_INITIALIZED":
      return { ...state, isInitialized: action.isInitialized };
    case "SET_LOADING":
      return { ...state, isLoading: action.isLoading };
    case "SET_IS_LOGGED_IN":
      return { ...state, isLoggedIn: action.isLoggedIn };
    default:
      return state;
  }
};

// Store
const rootReducer = combineReducers({ app: appReducer });

const store = configureStore({ reducer: rootReducer });
type RootState = ReturnType<typeof store.getState>;
type AppDispatch = ThunkDispatch<RootState, unknown, ActionsType>;
type AppThunk<ReturnType = void> = ThunkAction<
  ReturnType,
  RootState,
  unknown,
  ActionsType
>;
const useAppDispatch = () => useDispatch<AppDispatch>();
const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;

const setIsInitialized = (isInitialized: boolean) =>
  ({ type: "SET_IS_INITIALIZED", isInitialized } as const);
const setLoading = (isLoading: boolean) =>
  ({ type: "SET_LOADING", isLoading } as const);
const setIsLoggedIn = (isLoggedIn: boolean) =>
  ({ type: "SET_IS_LOGGED_IN", isLoggedIn } as const);
type ActionsType =
  | ReturnType<typeof setLoading>
  | ReturnType<typeof setIsInitialized>
  | ReturnType<typeof setIsLoggedIn>;

// Thunk
const me = (): AppThunk => async dispatch => {
  dispatch(setLoading(true));
  api
    .me()
    .then(res => {
      dispatch(setIsLoggedIn(true));
    })
    .finally(() => {
      dispatch(setLoading(false));
      dispatch(setIsInitialized(true));
    });
};

// Components
const Loader = () => <h2>üîò –ö—Ä—É—Ç–∏–ª–∫–∞...</h2>;

const Login = () => {
  const isInitialized = useAppSelector(state => state.app.isInitialized);
  const isLoading = useAppSelector(state => state.app.isLoading);
  const isLoggedIn = useAppSelector(state => state.app.isLoggedIn);

  if (isLoggedIn) {
    return <Navigate to={"/"} />;
  }

  return <h2>üê£ Login</h2>;
};
const Profile = () => {
  const isInitialized = useAppSelector(state => state.app.isInitialized);
  const isLoading = useAppSelector(state => state.app.isLoading);
  const isLoggedIn = useAppSelector(state => state.app.isLoggedIn);

  if (!isLoggedIn) {
    return <Navigate to={"/login"} />;
  }

  return <h2>üòé Profile </h2>;
};

export const App = () => {
  const isInitialized = useAppSelector(state => state.app.isInitialized);
  const isLoading = useAppSelector(state => state.app.isLoading);
  const isLoggedIn = useAppSelector(state => state.app.isLoggedIn);

  const dispatch = useAppDispatch();

  useEffect(() => {
    dispatch(me());
  }, []);

  return (
    <Routes>
      <Route path={"/"} element={<Profile />} />
      <Route path={"login"} element={<Login />} />
    </Routes>
  );
};

const root = ReactDOM.createRoot(
  document.getElementById("root") as HTMLElement
);
root.render(
  <BrowserRouter>
    <Provider store={store}>
      <App />
    </Provider>
  </BrowserRouter>
);

// üìú –û–ø–∏—Å–∞–Ω–∏–µ:
// –ü–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ / –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º—ã –≤–∏–¥–∏–º Login, –∞ –ø–æ—Ç–æ–º —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã Profile
// –ù–æ —ç—Ç–æ –ø–ª–æ—Ö–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ.
// –í–∞—à–∞ –∑–∞–¥–∞—á–∞ –Ω–∞–ø–∏—Å–∞—Ç—å –∫–æ–¥ –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –±—É–¥–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –Ω–∞ Login,
// –ø–æ–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –ø—Ä–æ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ,
// –∞ –≤–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞ –æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ—Ç—å Loader

// üñ• –ü—Ä–∏–º–µ—Ä –æ—Ç–≤–µ—Ç–∞: <Loader/>
